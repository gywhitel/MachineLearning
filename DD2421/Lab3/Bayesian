import numpy


class data:
    'Features and labels'

    def __init__(self, feature, label):
        self.feature = feature
        self.label = label


# Read data from txt files
irisx = []
irisy = []
with open('D:\Python\MachineLearning\Lab3\irisX.txt') as f:
	for vector in f:
		irisx.append(vector.strip().split('\n'))

with open('D:\Python\MachineLearning\Lab3\irisY.txt') as f:
	for vector in f:
		irisy.append(vector.strip().split('\n'))

# len(irisX)*2
'''
iris[i].feature
iris[i].label
'''
iris = []
for i in range(0,len(irisx)):
    iris.append(data(irisx[i],irisy[i]))

# --------------------------------------------------------------------
'''
divide x into different group by classes
x_c1 = (x1,x2,x3,x4)
x_c2 = (x1,x2,x3,x4)
x_c3 = (x1,x2,x3,x4)
x = (x_c1, x_c2, x_c3)
labels = (c1, c2, c3)
'''

xc1=[]
xc2=[]
xc3=[]
classes = numpy.unique(irisy)
for i in (0,len(irisy)):
    



def mlParams(x, labels):
    '''Return the mean value matrix(*classes* x *dimensions* **mu** and the covariance matrix(*classes x dimensions x dimensions* **sigma** of classes
    x: features(row vector)
    labels:the label of each data points
    '''
    

# For each class, compute the MU and SIGMA respectively

# numpy.average
def mu(x):
    '''
    Return the mean value
    x: array-like'''
    sum = 0
    for i in x:
        sum = sum + i
    return sum/len(x)


def sigma(x):
    '''
    Return the covariance vector
    x: array-like
    '''
'''
    x(i), x(j) in x = [x(1), x(2), x(3), x(4)]
    if i!= j: 
        cov(x(i),x(j)) = 0
    else: 
        sigma = numpy.average(x(i)-mu(x))**2


'''
